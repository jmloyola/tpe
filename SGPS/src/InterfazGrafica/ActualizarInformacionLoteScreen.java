/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package InterfazGrafica;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.Calendar;
import javax.swing.JOptionPane;

/**
 *
 * @author Juan
 */
public class ActualizarInformacionLoteScreen extends javax.swing.JFrame {
    
    
    Connection conn = null;
    ResultSet rs = null;
    PreparedStatement pst = null;    
    ResultSet rs2 = null;
    PreparedStatement pst2 = null;  

    /**
     * Creates new form ActualizarInformacionLoteScreen
     */
    public ActualizarInformacionLoteScreen() {
        initComponents();
        try {
            Class.forName("org.postgresql.Driver");
            conn = DriverManager.getConnection("jdbc:postgresql://localhost:5432/postgres", "postgres", "root");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e, "Error en conexión", JOptionPane.ERROR_MESSAGE);
        }
        
        try{
            String sql = "SELECT L_Identificador FROM Lotes WHERE L_Estado = 'Procesando' ORDER BY L_Identificador";
            pst = conn.prepareStatement(sql);
            rs = pst.executeQuery();
            
            while (rs.next()){
                String identificador = rs.getString("L_Identificador");
                identificadoresLotesComboBox.addItem(identificador);
            }
        }catch(Exception e){
            JOptionPane.showMessageDialog(this, e.getMessage(), "Error al buscar valores de Identificador de Lotes", JOptionPane.ERROR_MESSAGE);
        }
        
        identificadoresLotesComboBox.setSelectedIndex(-1);
        
        estadoComboBox.setEnabled(false);
        
        motivoDeficienciaTextField.setEnabled(false);
        fechaIngresoDepositoDateChooser.setEnabled(false);
        fechaVencimientoDateChooser.setEnabled(false);
        cantidadDescarteUtilizadoFormattedTextField.setEnabled(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        identificadorYFechaCreacionPanel = new javax.swing.JPanel();
        identificadorLabel = new javax.swing.JLabel();
        identificadoresLotesComboBox = new javax.swing.JComboBox();
        estadoLabel = new javax.swing.JLabel();
        estadoComboBox = new javax.swing.JComboBox();
        cancelarButton = new javax.swing.JButton();
        aceptarButton = new javax.swing.JButton();
        estadoDefectuosoPanel = new javax.swing.JPanel();
        motivoDeficienciaTextField = new javax.swing.JTextField();
        motivoDeficienciaLabel = new javax.swing.JLabel();
        estadoTerminadoPanel = new javax.swing.JPanel();
        fechaIngresoDepositoLabel = new javax.swing.JLabel();
        fechaVencimientoLabel = new javax.swing.JLabel();
        fechaVencimientoDateChooser = new com.toedter.calendar.JDateChooser();
        fechaIngresoDepositoDateChooser = new com.toedter.calendar.JDateChooser();
        estadoProcesandoPanel = new javax.swing.JPanel();
        cantidadDescarteUtilizadoFormattedTextField = new javax.swing.JFormattedTextField();
        cantidadDescarteUtilizadoLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Actualizar Información Lote");
        setAlwaysOnTop(true);
        setResizable(false);

        identificadorYFechaCreacionPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Ingrese identificador del lote:"));

        identificadorLabel.setText("Identificador:");

        identificadoresLotesComboBox.setPreferredSize(new java.awt.Dimension(175, 20));
        identificadoresLotesComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                identificadoresLotesComboBoxItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout identificadorYFechaCreacionPanelLayout = new javax.swing.GroupLayout(identificadorYFechaCreacionPanel);
        identificadorYFechaCreacionPanel.setLayout(identificadorYFechaCreacionPanelLayout);
        identificadorYFechaCreacionPanelLayout.setHorizontalGroup(
            identificadorYFechaCreacionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(identificadorYFechaCreacionPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(identificadorLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(identificadoresLotesComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        identificadorYFechaCreacionPanelLayout.setVerticalGroup(
            identificadorYFechaCreacionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(identificadorYFechaCreacionPanelLayout.createSequentialGroup()
                .addContainerGap(13, Short.MAX_VALUE)
                .addGroup(identificadorYFechaCreacionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(identificadorLabel)
                    .addComponent(identificadoresLotesComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(3, 3, 3))
        );

        estadoLabel.setText("Estado:");

        estadoComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Procesando", "Defectuoso", "Terminado" }));
        estadoComboBox.setSelectedIndex(-1);
        estadoComboBox.setPreferredSize(new java.awt.Dimension(150, 20));
        estadoComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                estadoComboBoxItemStateChanged(evt);
            }
        });

        cancelarButton.setText("Cancelar");
        cancelarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelarButtonActionPerformed(evt);
            }
        });

        aceptarButton.setText("Aceptar");
        aceptarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aceptarButtonActionPerformed(evt);
            }
        });

        motivoDeficienciaTextField.setPreferredSize(new java.awt.Dimension(252, 20));

        motivoDeficienciaLabel.setText("Motivo Deficiencia:");

        javax.swing.GroupLayout estadoDefectuosoPanelLayout = new javax.swing.GroupLayout(estadoDefectuosoPanel);
        estadoDefectuosoPanel.setLayout(estadoDefectuosoPanelLayout);
        estadoDefectuosoPanelLayout.setHorizontalGroup(
            estadoDefectuosoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(estadoDefectuosoPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(motivoDeficienciaLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(motivoDeficienciaTextField, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        estadoDefectuosoPanelLayout.setVerticalGroup(
            estadoDefectuosoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(estadoDefectuosoPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(estadoDefectuosoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(motivoDeficienciaLabel)
                    .addComponent(motivoDeficienciaTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        fechaIngresoDepositoLabel.setText("Fecha de Ingreso Depósito:");

        fechaVencimientoLabel.setText("Fecha de Vencimiento:");

        fechaVencimientoDateChooser.setDateFormatString("dd/MM/yyyy");

        fechaIngresoDepositoDateChooser.setDateFormatString("dd/MM/yyyy");
        fechaIngresoDepositoDateChooser.setPreferredSize(new java.awt.Dimension(175, 20));

        javax.swing.GroupLayout estadoTerminadoPanelLayout = new javax.swing.GroupLayout(estadoTerminadoPanel);
        estadoTerminadoPanel.setLayout(estadoTerminadoPanelLayout);
        estadoTerminadoPanelLayout.setHorizontalGroup(
            estadoTerminadoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(estadoTerminadoPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(estadoTerminadoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(fechaIngresoDepositoLabel)
                    .addComponent(fechaVencimientoLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(estadoTerminadoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(fechaIngresoDepositoDateChooser, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(fechaVencimientoDateChooser, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        estadoTerminadoPanelLayout.setVerticalGroup(
            estadoTerminadoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(estadoTerminadoPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(estadoTerminadoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(fechaIngresoDepositoLabel)
                    .addComponent(fechaIngresoDepositoDateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(estadoTerminadoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(fechaVencimientoLabel)
                    .addComponent(fechaVencimientoDateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        cantidadDescarteUtilizadoFormattedTextField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.00"))));
        cantidadDescarteUtilizadoFormattedTextField.setPreferredSize(new java.awt.Dimension(190, 20));

        cantidadDescarteUtilizadoLabel.setText("Cantidad de Descarte Utilizado:");

        javax.swing.GroupLayout estadoProcesandoPanelLayout = new javax.swing.GroupLayout(estadoProcesandoPanel);
        estadoProcesandoPanel.setLayout(estadoProcesandoPanelLayout);
        estadoProcesandoPanelLayout.setHorizontalGroup(
            estadoProcesandoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(estadoProcesandoPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(cantidadDescarteUtilizadoLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cantidadDescarteUtilizadoFormattedTextField, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        estadoProcesandoPanelLayout.setVerticalGroup(
            estadoProcesandoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(estadoProcesandoPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(estadoProcesandoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cantidadDescarteUtilizadoLabel)
                    .addComponent(cantidadDescarteUtilizadoFormattedTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(identificadorYFechaCreacionPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(estadoLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(estadoComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(estadoProcesandoPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(aceptarButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cancelarButton)
                                .addContainerGap())
                            .addComponent(estadoDefectuosoPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(estadoTerminadoPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(identificadorYFechaCreacionPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(estadoLabel)
                            .addComponent(estadoComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(estadoProcesandoPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(estadoDefectuosoPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(estadoTerminadoPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 65, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(aceptarButton)
                            .addComponent(cancelarButton))
                        .addContainerGap())))
        );

        setSize(new java.awt.Dimension(392, 417));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void cancelarButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelarButtonActionPerformed
        this.dispose();
    }//GEN-LAST:event_cancelarButtonActionPerformed

    private void estadoComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_estadoComboBoxItemStateChanged
        identificadoresLotesComboBox.setEnabled(false);
        switch (estadoComboBox.getSelectedIndex()){
            case 0:
                cantidadDescarteUtilizadoFormattedTextField.setEnabled(true);
                motivoDeficienciaTextField.setEnabled(false);
                fechaIngresoDepositoDateChooser.setEnabled(false);
                fechaVencimientoDateChooser.setEnabled(false);
                break;
            case 1:
                motivoDeficienciaTextField.setEnabled(true);
                cantidadDescarteUtilizadoFormattedTextField.setEnabled(false);
                fechaIngresoDepositoDateChooser.setEnabled(false);
                fechaVencimientoDateChooser.setEnabled(false);                
                break;
            case 2:
                fechaIngresoDepositoDateChooser.setEnabled(true);
                fechaVencimientoDateChooser.setEnabled(true);
                cantidadDescarteUtilizadoFormattedTextField.setEnabled(false);
                motivoDeficienciaTextField.setEnabled(false);                
                break;
        }
    }//GEN-LAST:event_estadoComboBoxItemStateChanged

    private void identificadoresLotesComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_identificadoresLotesComboBoxItemStateChanged
        estadoComboBox.setEnabled(true);
    }//GEN-LAST:event_identificadoresLotesComboBoxItemStateChanged

    private void aceptarButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aceptarButtonActionPerformed
        if (identificadoresLotesComboBox.getSelectedIndex() != -1){
            if (estadoComboBox.getSelectedIndex() != -1){
                    switch (estadoComboBox.getSelectedIndex()){
                        case 0:
                            if (!cantidadDescarteUtilizadoFormattedTextField.getText().equals("")){
                                try{
                                    String sql2 = "SELECT SM_D_Codigo FROM StocksMensualesDescarte WHERE SM_D_Fecha = ?";
                                    pst2 = conn.prepareStatement(sql2);

                                    Calendar calendarioActual = Calendar.getInstance();
                                    calendarioActual.set(Calendar.DAY_OF_MONTH, 1);

                                    java.util.Date today = new java.util.Date(calendarioActual.getTimeInMillis());
                                    java.sql.Date fechaActual = new java.sql.Date(today.getTime());

                                    pst2.setDate(1,fechaActual);

                                    rs2 = pst2.executeQuery();

                                    if (rs2.next()){
                                        String sql = "UPDATE Lotes SET L_CantidadDescarteUtilizado=?, SM_D_Codigo_UtilizadoEn=? WHERE L_Identificador=? AND L_Estado = 'Procesando';";
                                        pst = conn.prepareStatement(sql);

                                        pst.setFloat(1, ((Number)cantidadDescarteUtilizadoFormattedTextField.getValue()).floatValue());
                                        pst.setInt(2, rs2.getInt("SM_D_Codigo"));
                                        pst.setString(3, identificadoresLotesComboBox.getSelectedItem().toString());

                                        pst.execute();

                                        JOptionPane.showMessageDialog(this, "Actualización de información de lote realizada correctamente", "Actualización de información de Lote", JOptionPane.INFORMATION_MESSAGE);
                                        this.dispose();
                                    }

                                }catch (Exception e){
                                    JOptionPane.showMessageDialog(this, e.getMessage(), "Error al actualizar la información del lote", JOptionPane.ERROR_MESSAGE);
                                }
                            }
                            else{
                                JOptionPane.showMessageDialog(this, "La cantidad de descarte no puede ser vacía.", "Error al actualizar información del lote", JOptionPane.ERROR_MESSAGE);
                            }
                            break;
                        case 1:
                            if (!motivoDeficienciaTextField.getText().equals("")){
                                try{

                                    String sql = "UPDATE Lotes SET L_MotivoDeficiencia=?, L_Estado='Terminado' WHERE L_Identificador=? AND L_Estado = 'Procesando';";
                                    pst = conn.prepareStatement(sql);

                                    pst.setString(1, motivoDeficienciaTextField.getText());
                                    pst.setString(2, identificadoresLotesComboBox.getSelectedItem().toString());

                                    pst.execute();

                                    JOptionPane.showMessageDialog(this, "Actualización de información de lote realizada correctamente", "Actualización de información de Lote", JOptionPane.INFORMATION_MESSAGE);
                                    this.dispose();


                                }catch (Exception e){
                                    JOptionPane.showMessageDialog(this, e.getMessage(), "Error al actualizar la información del lote", JOptionPane.ERROR_MESSAGE);
                                }
                            }
                            else{
                                JOptionPane.showMessageDialog(this, "El motivo de deficiencia no puede ser vacío", "Error al actualizar información del lote.", JOptionPane.ERROR_MESSAGE);
                            }
                            break;
                        case 2:
                            if (fechaIngresoDepositoDateChooser.getDate() != null){
                                if (fechaVencimientoDateChooser.getDate() != null){
                                    try{

                                        String sql = "UPDATE Lotes SET L_FechaIngresoDeposito=?,L_FechaVencimiento=?, L_Estado='Defectuoso' WHERE L_Identificador=? AND L_Estado = 'Procesando';";
                                        pst = conn.prepareStatement(sql);

                                        // Preparo fecha
                                        java.sql.Date fechaIngresoDepositoSql = new java.sql.Date(fechaIngresoDepositoDateChooser.getDate().getTime());
                                        pst.setDate(1, fechaIngresoDepositoSql);                            

                                        java.sql.Date fechaVencimientoSql = new java.sql.Date(fechaVencimientoDateChooser.getDate().getTime());
                                        pst.setDate(2, fechaVencimientoSql);                                                        

                                        pst.setString(3, identificadoresLotesComboBox.getSelectedItem().toString());

                                        pst.execute();

                                        JOptionPane.showMessageDialog(this, "Actualización de información de lote realizada correctamente", "Actualización de información de Lote", JOptionPane.INFORMATION_MESSAGE);
                                        this.dispose();


                                    }catch (Exception e){
                                        JOptionPane.showMessageDialog(this, e.getMessage(), "Error al actualizar la información del lote", JOptionPane.ERROR_MESSAGE);
                                    }
                                }
                                else{
                                    JOptionPane.showMessageDialog(this, "La fecha de vencimiento no puede ser vacía", "Error al actualizar información del lote.", JOptionPane.ERROR_MESSAGE);
                                }
                            }
                            else{
                                JOptionPane.showMessageDialog(this, "La fecha de ingreso a depósito no puede ser vacía", "Error al actualizar información del lote.", JOptionPane.ERROR_MESSAGE);
                            }        
                            break;
                    }
            }
            else{
                JOptionPane.showMessageDialog(this, "Debe seleccionar el estado en el que se encuentra el lote actualmente.", "Error al actualizar la información del lote", JOptionPane.ERROR_MESSAGE);
            }
        }
        else{
            JOptionPane.showMessageDialog(this, "Debe seleccionar un lote que se encuentre procesando.", "Error al actualizar la información del lote", JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_aceptarButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ActualizarInformacionLoteScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ActualizarInformacionLoteScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ActualizarInformacionLoteScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ActualizarInformacionLoteScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ActualizarInformacionLoteScreen().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton aceptarButton;
    private javax.swing.JButton cancelarButton;
    private javax.swing.JFormattedTextField cantidadDescarteUtilizadoFormattedTextField;
    private javax.swing.JLabel cantidadDescarteUtilizadoLabel;
    private javax.swing.JComboBox estadoComboBox;
    private javax.swing.JPanel estadoDefectuosoPanel;
    private javax.swing.JLabel estadoLabel;
    private javax.swing.JPanel estadoProcesandoPanel;
    private javax.swing.JPanel estadoTerminadoPanel;
    private com.toedter.calendar.JDateChooser fechaIngresoDepositoDateChooser;
    private javax.swing.JLabel fechaIngresoDepositoLabel;
    private com.toedter.calendar.JDateChooser fechaVencimientoDateChooser;
    private javax.swing.JLabel fechaVencimientoLabel;
    private javax.swing.JLabel identificadorLabel;
    private javax.swing.JPanel identificadorYFechaCreacionPanel;
    private javax.swing.JComboBox identificadoresLotesComboBox;
    private javax.swing.JLabel motivoDeficienciaLabel;
    private javax.swing.JTextField motivoDeficienciaTextField;
    // End of variables declaration//GEN-END:variables
}
