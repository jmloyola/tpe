/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package InterfazGrafica;

import java.math.BigDecimal;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.Calendar;
import java.util.GregorianCalendar;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import net.proteanit.sql.DbUtils;

/**
 *
 * @author Juan
 */
public class BuscarEmpleadosScreen extends javax.swing.JFrame {

    Connection conn = null;
    ResultSet rs = null;
    PreparedStatement pst = null;
    
    /**
     * Creates new form BuscarEmpleadosScreen
     */
    public BuscarEmpleadosScreen() {
        initComponents();
        try {
            Class.forName("org.postgresql.Driver");
            conn = DriverManager.getConnection("jdbc:postgresql://localhost:5432/postgres", "postgres", "root");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e, "Error en conexion", JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        parametroABucarPanel = new javax.swing.JPanel();
        parametroABuscarToolBox = new javax.swing.JComboBox();
        parametroBusquedaLabel = new javax.swing.JLabel();
        valorBusquedaLabel = new javax.swing.JLabel();
        valorParametroTextField = new javax.swing.JTextField();
        buscarEmpleadosButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        resultadoBusquedaEmpleadosTable = new javax.swing.JTable();
        salirButton = new javax.swing.JButton();
        imprimirButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Buscar Empleados");
        setAlwaysOnTop(true);

        parametroABucarPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Ingrese el parametro y valor por el que buscar:"));

        parametroABuscarToolBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Nombre", "DNI", "Telefono", "Fecha Ingreso", "Numero de Legajo", "Sueldo", "CUIL", "Estado Civil", "Cantidad de Hijos", "Domicilio", "Codigo Postal", "Pais de Residencia", "Provincia de Residencia", "Ciudad de Residencia", "Categoria", "Estado" }));
        parametroABuscarToolBox.setSelectedIndex(-1);
        parametroABuscarToolBox.setPreferredSize(new java.awt.Dimension(300, 20));

        parametroBusquedaLabel.setText("Parametro de Busqueda:");

        valorBusquedaLabel.setText("Valor:");

        buscarEmpleadosButton.setText("Buscar");
        buscarEmpleadosButton.setPreferredSize(new java.awt.Dimension(75, 55));
        buscarEmpleadosButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buscarEmpleadosButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout parametroABucarPanelLayout = new javax.swing.GroupLayout(parametroABucarPanel);
        parametroABucarPanel.setLayout(parametroABucarPanelLayout);
        parametroABucarPanelLayout.setHorizontalGroup(
            parametroABucarPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(parametroABucarPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(parametroABucarPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(parametroABucarPanelLayout.createSequentialGroup()
                        .addComponent(parametroBusquedaLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(parametroABuscarToolBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, parametroABucarPanelLayout.createSequentialGroup()
                        .addComponent(valorBusquedaLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(valorParametroTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(buscarEmpleadosButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(401, Short.MAX_VALUE))
        );

        parametroABucarPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {parametroABuscarToolBox, valorParametroTextField});

        parametroABucarPanelLayout.setVerticalGroup(
            parametroABucarPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(parametroABucarPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(parametroABucarPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(parametroABucarPanelLayout.createSequentialGroup()
                        .addGroup(parametroABucarPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(parametroABuscarToolBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(parametroBusquedaLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(parametroABucarPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(valorBusquedaLabel)
                            .addComponent(valorParametroTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(buscarEmpleadosButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        resultadoBusquedaEmpleadosTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Nombre", "DNI", "Telefono", "Fecha de Ingreso", "Numero de Legajo", "Sueldo", "CUIL", "Estado Civil", "Cantidad de Hijos", "Domicilio", "Codigo Postal", "Pais de Residencia", "Provincia de Residencia", "Ciudad de Residencia", "Categoria", "Estado"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Object.class, java.lang.Integer.class, java.lang.Float.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(resultadoBusquedaEmpleadosTable);

        salirButton.setText("Salir");
        salirButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                salirButtonActionPerformed(evt);
            }
        });

        imprimirButton.setText("Imprimir");
        imprimirButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                imprimirButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(parametroABucarPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(imprimirButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(salirButton)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(parametroABucarPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 316, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(salirButton)
                    .addComponent(imprimirButton))
                .addContainerGap())
        );

        setSize(new java.awt.Dimension(969, 522));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void salirButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_salirButtonActionPerformed
        this.dispose();
    }//GEN-LAST:event_salirButtonActionPerformed

    private void imprimirButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_imprimirButtonActionPerformed
        try{
            resultadoBusquedaEmpleadosTable.print(JTable.PrintMode.FIT_WIDTH);
        }catch(java.awt.print.PrinterException e){
            JOptionPane.showMessageDialog(this, e.getMessage(), "Error al imprimir", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_imprimirButtonActionPerformed

    private void buscarEmpleadosButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buscarEmpleadosButtonActionPerformed
        if (parametroABuscarToolBox.getSelectedIndex() >= 0){
            if (!valorParametroTextField.getText().equals("")){
                switch(parametroABuscarToolBox.getSelectedIndex()){
                    case 0:
                        try{
                            String sql = "SELECT * FROM empleados WHERE E_Nombre LIKE ?";
                            pst = conn.prepareStatement(sql);

                            pst.setString(1,"%"+valorParametroTextField.getText()+"%");

                            rs = pst.executeQuery();
                            resultadoBusquedaEmpleadosTable.setModel(DbUtils.resultSetToTableModel(rs));
                        }catch(Exception e){
                            JOptionPane.showMessageDialog(this, e, "Error al realizar la busqueda del empleado", JOptionPane.ERROR_MESSAGE);
                        }
                        break;
                    case 1:
                        try{
                            String sql = "SELECT * FROM empleados WHERE e_dni = ?";
                            pst = conn.prepareStatement(sql);

                            pst.setInt(1,Integer.parseInt(valorParametroTextField.getText()));

                            rs = pst.executeQuery();
                            resultadoBusquedaEmpleadosTable.setModel(DbUtils.resultSetToTableModel(rs));
                        }catch(Exception e){
                            JOptionPane.showMessageDialog(this, e, "Error al realizar la busqueda del empleado", JOptionPane.ERROR_MESSAGE);
                        }
                        break;                        
                    case 2:
                        try{
                            String sql = "SELECT * FROM empleados WHERE e_telefono = ?";
                            pst = conn.prepareStatement(sql);

                            //pst.setInt(1,Integer.parseInt(valorParametroTextField.getText()));
                            pst.setLong(1,Long.parseLong(valorParametroTextField.getText()));

                            rs = pst.executeQuery();
                            resultadoBusquedaEmpleadosTable.setModel(DbUtils.resultSetToTableModel(rs));
                        }catch(Exception e){
                            JOptionPane.showMessageDialog(this, e, "Error al realizar la busqueda del empleado", JOptionPane.ERROR_MESSAGE);
                        }
                        break;                        
                    case 3:
                        try{
                            String sql = "SELECT * FROM empleados WHERE e_domicilio = ?";
                            pst = conn.prepareStatement(sql);
                            
                            int anio = Integer.parseInt(valorParametroTextField.getText().substring(0, 4));
                            int mes = Integer.parseInt(valorParametroTextField.getText().substring(5, 7));
                            int dia = Integer.parseInt(valorParametroTextField.getText().substring(8, 10));
                            GregorianCalendar fechaIngresada = new GregorianCalendar(anio, mes, dia);
                            
                            java.util.Date fecha = new java.util.Date(fechaIngresada.getTimeInMillis());
                            java.sql.Date fechaActual = new java.sql.Date(fecha.getTime());
                            

                            pst.setDate(1,fechaActual);                            

                            rs = pst.executeQuery();
                            resultadoBusquedaEmpleadosTable.setModel(DbUtils.resultSetToTableModel(rs));
                        }catch(Exception e){
                            JOptionPane.showMessageDialog(this, e, "Error al realizar la busqueda del empleado", JOptionPane.ERROR_MESSAGE);
                        }
                        break;                        
                    case 4:
                        try{
                            String sql = "SELECT * FROM empleados WHERE e_numerolegajo = ?";
                            pst = conn.prepareStatement(sql);

                            pst.setInt(1,Integer.parseInt(valorParametroTextField.getText()));

                            rs = pst.executeQuery();
                            resultadoBusquedaEmpleadosTable.setModel(DbUtils.resultSetToTableModel(rs));
                        }catch(Exception e){
                            JOptionPane.showMessageDialog(this, e, "Error al realizar la busqueda del empleado", JOptionPane.ERROR_MESSAGE);
                        }
                        break;                        
                    case 5:
                        try{
                            String sql = "SELECT * FROM empleados WHERE e_dni = ?";
                            pst = conn.prepareStatement(sql);

                            pst.setFloat(1,Float.parseFloat(valorParametroTextField.getText()));

                            rs = pst.executeQuery();
                            resultadoBusquedaEmpleadosTable.setModel(DbUtils.resultSetToTableModel(rs));
                        }catch(Exception e){
                            JOptionPane.showMessageDialog(this, e, "Error al realizar la busqueda del empleado", JOptionPane.ERROR_MESSAGE);
                        }
                        break;                        
                    case 6:
                        try{
                            String sql = "SELECT * FROM empleados WHERE e_cuil = ?";
                            pst = conn.prepareStatement(sql);

                            pst.setString(1,valorParametroTextField.getText());

                            rs = pst.executeQuery();
                            resultadoBusquedaEmpleadosTable.setModel(DbUtils.resultSetToTableModel(rs));
                        }catch(Exception e){
                            JOptionPane.showMessageDialog(this, e, "Error al realizar la busqueda del empleado", JOptionPane.ERROR_MESSAGE);
                        }
                        break;                        
                    case 7:
                        try{
                            String sql = "SELECT * FROM empleados WHERE e_estadocivil = ?";
                            pst = conn.prepareStatement(sql);

                            pst.setString(1,valorParametroTextField.getText());

                            rs = pst.executeQuery();
                            resultadoBusquedaEmpleadosTable.setModel(DbUtils.resultSetToTableModel(rs));
                        }catch(Exception e){
                            JOptionPane.showMessageDialog(this, e, "Error al realizar la busqueda del empleado", JOptionPane.ERROR_MESSAGE);
                        }
                        break;                        
                    case 8:
                        try{
                            String sql = "SELECT * FROM empleados WHERE e_cantidadhijos = ?";
                            pst = conn.prepareStatement(sql);

                            pst.setInt(1,Integer.parseInt(valorParametroTextField.getText()));

                            rs = pst.executeQuery();
                            resultadoBusquedaEmpleadosTable.setModel(DbUtils.resultSetToTableModel(rs));
                        }catch(Exception e){
                            JOptionPane.showMessageDialog(this, e, "Error al realizar la busqueda del empleado", JOptionPane.ERROR_MESSAGE);
                        }
                        break;                          
                    case 9:
                        try{
                            String sql = "SELECT * FROM empleados WHERE e_domicilio = ?";
                            pst = conn.prepareStatement(sql);

                            pst.setString(1,valorParametroTextField.getText());

                            rs = pst.executeQuery();
                            resultadoBusquedaEmpleadosTable.setModel(DbUtils.resultSetToTableModel(rs));
                        }catch(Exception e){
                            JOptionPane.showMessageDialog(this, e, "Error al realizar la busqueda del empleado", JOptionPane.ERROR_MESSAGE);
                        }
                        break;                         
                    case 10:
                        try{
                            String sql = "SELECT * FROM empleados WHERE e_codigopostal = ?";
                            pst = conn.prepareStatement(sql);

                            pst.setInt(1,Integer.parseInt(valorParametroTextField.getText()));

                            rs = pst.executeQuery();
                            resultadoBusquedaEmpleadosTable.setModel(DbUtils.resultSetToTableModel(rs));
                        }catch(Exception e){
                            JOptionPane.showMessageDialog(this, e, "Error al realizar la busqueda del empleado", JOptionPane.ERROR_MESSAGE);
                        }
                        break;                        
                    case 11:
                        try{
                            String sql = "SELECT * FROM empleados WHERE e_paisresidencia = ?";
                            pst = conn.prepareStatement(sql);

                            pst.setString(1,valorParametroTextField.getText());

                            rs = pst.executeQuery();
                            resultadoBusquedaEmpleadosTable.setModel(DbUtils.resultSetToTableModel(rs));
                        }catch(Exception e){
                            JOptionPane.showMessageDialog(this, e, "Error al realizar la busqueda del empleado", JOptionPane.ERROR_MESSAGE);
                        }
                        break;                        
                    case 12:
                        try{
                            String sql = "SELECT * FROM empleados WHERE e_provinciaresidencia = ?";
                            pst = conn.prepareStatement(sql);

                            pst.setString(1,valorParametroTextField.getText());

                            rs = pst.executeQuery();
                            resultadoBusquedaEmpleadosTable.setModel(DbUtils.resultSetToTableModel(rs));
                        }catch(Exception e){
                            JOptionPane.showMessageDialog(this, e, "Error al realizar la busqueda del empleado", JOptionPane.ERROR_MESSAGE);
                        }
                        break;                        
                    case 13:
                        try{
                            String sql = "SELECT * FROM empleados WHERE e_ciudadresidencia = ?";
                            pst = conn.prepareStatement(sql);

                            pst.setString(1,valorParametroTextField.getText());

                            rs = pst.executeQuery();
                            resultadoBusquedaEmpleadosTable.setModel(DbUtils.resultSetToTableModel(rs));
                        }catch(Exception e){
                            JOptionPane.showMessageDialog(this, e, "Error al realizar la busqueda del empleado", JOptionPane.ERROR_MESSAGE);
                        }
                        break;                        
                    case 14:
                        try{
                            String sql = "SELECT * FROM empleados WHERE e_categoria = ?";
                            pst = conn.prepareStatement(sql);

                            pst.setString(1,valorParametroTextField.getText());

                            rs = pst.executeQuery();
                            resultadoBusquedaEmpleadosTable.setModel(DbUtils.resultSetToTableModel(rs));
                        }catch(Exception e){
                            JOptionPane.showMessageDialog(this, e, "Error al realizar la busqueda del empleado", JOptionPane.ERROR_MESSAGE);
                        }
                        break;                        
                    case 15:
                        try{
                            String sql = "SELECT * FROM empleados WHERE e_estado = ?";
                            pst = conn.prepareStatement(sql);

                            pst.setString(1,valorParametroTextField.getText());

                            rs = pst.executeQuery();
                            resultadoBusquedaEmpleadosTable.setModel(DbUtils.resultSetToTableModel(rs));
                        }catch(Exception e){
                            JOptionPane.showMessageDialog(this, e, "Error al realizar la busqueda del empleado", JOptionPane.ERROR_MESSAGE);
                        }
                        break;                        
                }
            }
            else{
                JOptionPane.showMessageDialog(this, "El valor del parametor de busqueda no puede ser vacio.", "Error al buscar empleado", JOptionPane.ERROR_MESSAGE);
            }
        }
        else{
            JOptionPane.showMessageDialog(this, "El parametro de busqueda no puede ser vacio.", "Error al buscar empleado", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_buscarEmpleadosButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BuscarEmpleadosScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BuscarEmpleadosScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BuscarEmpleadosScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BuscarEmpleadosScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new BuscarEmpleadosScreen().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buscarEmpleadosButton;
    private javax.swing.JButton imprimirButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel parametroABucarPanel;
    private javax.swing.JComboBox parametroABuscarToolBox;
    private javax.swing.JLabel parametroBusquedaLabel;
    private javax.swing.JTable resultadoBusquedaEmpleadosTable;
    private javax.swing.JButton salirButton;
    private javax.swing.JLabel valorBusquedaLabel;
    private javax.swing.JTextField valorParametroTextField;
    // End of variables declaration//GEN-END:variables
}
